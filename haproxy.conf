global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL).
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:aRSA+3DES:!RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL
    ssl-default-bind-options no-sslv3

defaults
    log global
    mode    http
    option  httplog
    option  log-separate-errors         # Separate error logs from access logs
    balance roundrobin
    option  dontlognull
    option redispatch  # Redirect the first dropped HTTP request if another server is in the pool

    timeout connect 5000
    timeout client  50000
    timeout server  50000

    timeout http-request 10m # Allows importing Moodle courses with large question banks
    timeout client 10m
    timeout server 10m

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend    load_balancers
    #HTTP
    bind 192.168.3.176:80 # shared test IP address
    bind 192.168.1.176:80 # shared production IP address
    #HTTPS
    bind 192.168.3.176:80 ssl crt /etc/ssl/private/wildcard.midmich.edu.pem
    bind 192.168.1.176:80:443 ssl crt /etc/ssl/private/wildcard.midmich.edu.pem

    # Mitigate HTTPoxy
    http-request del-header Proxy


# VPN/internal only
acl from_internal_network src 10.23.0.0/16 172.20.1.0/24

acl dest_webui5 hdr(host) -i webui5.midmich.edu

# Show the 403 page (will be sent http or https -- no auto redirect!)
http-request deny if !from_internal_network dest_webui5

use_backend webui5_nodes     if dest_webui5


acl dest_webapi hdr(host) –i webapi.midmich.edu
use_backend webapi_nodes if dest_webapi

acl dest_selfservice hdr(host) -i selfservice.midmich.edu
use_backend selfservice_nodes if dest_selfservice

#TODO:Paymetgatewy
#TODO:Blogs
#TODO:Apply
#TODO:WebAdvisor
#TODO:GitLab
#TODO:Informer5
#TODO:JAMF


backend webapi_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /ColleagueApi HTTP/1.1\r\nUser-Agent:…

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server webapi-prod     192.168.1.75:8084 check inter 2000

backend selfservice_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /Student HTTP/1.1\r\nUser-Agent:…

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
  # Redirect / to /Student where Self Service is running via IIS
  redirect location /Student code 302 if { path -i / }

  # The Self Service modules sometimes issue redirects to itself so we changed
  # IIS to run on 80 so it will be possible for HAProxy to respond to these
  # requests and redirect to 443
  #server selfservice-prod     192.168.1.88:8073 check inter 2000
  server selfservice-prod     192.168.1.88:80 check inter 2000

backend payment_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /PaymentGateway/css/SiteStyle.css…

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server paygate 67.209.249.173:443 check inter 2000 ssl verify none

#TODO:WebAdvsior

backend webui5_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /ui/index.html HTTP/1.1\r\nUser-Agent:\ HAProxy\r\nHost:\
                                                                     webui5.midmich.edu

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  # Redirect / to the WebUI launcher page
  redirect location /ui/index.html code 302 if { path -i / }

  server ui5prod1     192.168.1.78:7319 check inter 2000 ssl verify none

backend blogs_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }

  # See this WordPress example:
  # https://www.dylanbarlett.com/2015/06/elb-health-check-target
  option httpchk HEAD /blogs/wp-content/themes/mmcc-blogs/health-check.php \
                  HTTP/1.1\r\nUser-Agent:\ HAProxy\r\nHost:\ www.midmich.edu

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server docker01      192.168.1.68:8000 check inter 2000

backend apply_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /health_check HTTP/1.1\r\nHost:\ apply.midmich.edu\r\nUser-Agent:\ HAProxy

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server cortex1            192.168.1.91:443 check inter 2000 ssl verify none
  server cortex2            192.168.1.92:443 check inter 2000 ssl verify none

backend gitlab_nodes
  description MMCC's self-hosted revision control system
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  # Gitlab requires this additional header for SSL termination
  #   https://gitlab.com/gitlab-org/omnibus-gitlab/issues/331#note_997411
  http-request set-header X-Forwarded-Ssl on

  # Gitlab / nginx is, apparently, very specific
  #   Must pass the check as HTTP/1.0 (or it will not work!)
  #   Must NOT pass a Host field      (or it will not work!)
  option httpchk GET /-/readiness  HTTP/1.0\r\nUser-Agent:\ HAProxy

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server gitlab      192.168.1.48:8181 check inter 2000

backend informer5_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  option httpchk HEAD /api/health?postgres=true&redis=true&elastic=true \
                HTTP/1.1\r\nUser-Agent:\ HAProxy\r\nHost:\ informer5.midmich.edu

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  server informer5_1             192.168.1.84:443 check inter 2000 ssl verify none

backend mdm_nodes
  option forwardfor
  option http-server-close
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  # JAMF has a really good health check:
  # http://docs.jamf.com/9.9/casper-suite/administrator-guide/JSS_Health_Check_Page.html
  option httpchk GET /healthCheck.html HTTP/1.1\r\nUser-Agent:\ HAProxy\r\nHost:\ mdm.midmich.edu
  # Health check will return array/JSON of error messages
  # Don't be fooled - there is no whitespace between brackets when service is healthy!
  http-check expect string []

  # Redirect all traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  #server jamf             192.168.1.37:8443 check inter 2000 # without ssl for testing
  server jamf             192.168.1.37:8443 check inter 2000 ssl verify none

listen ad_ldaps
  # Inspired by:
  # reddit.com/r/sysadmin/comments/46c1im/issue_configuring_haproxy_frontend_to_active/
  mode tcp
  bind *:636 ssl crt /etc/ssl/private/wildcard.midmich.edu.pem
  description Secure LDAP Service
  option tcplog
  option tcpka
  timeout client 10s

  # `ssl verify none` is necessary unless we save all domain controller server certificates on the load balancers and keep them up-to-date!
  # (they seem to expire at different times and are reissued/renewed automatically)
  server 2012dc2      192.168.1.60:636 check fall 1 rise 1 inter 2s ssl verify none
  server 2012dc1      192.168.1.87:636 check fall 1 rise 1 inter 2s backup ssl verify none
  server 2012dc2-nic2 192.168.1.1:636  check fall 1 rise 1 inter 2s backup ssl verify none
  # balance leastconn # We chose to keep other servers as backup
  timeout server 10s
  timeout connect 2s

  # https://www.mail-archive.com/haproxy@formilux.org/msg17371.html
  option tcp-check
  tcp-check connect port  636 ssl
  tcp-check send-binary   300c0201       # LDAP bind request "<ROOT>" simple
  tcp-check send-binary   01             # message ID
  tcp-check send-binary   6007           # protocol Op
  tcp-check send-binary   0201           # bind request
  tcp-check send-binary   03             # LDAP v3
  tcp-check send-binary   04008000       # name, simple authentication
  tcp-check expect binary 0a0100         # bind response + result code: success
  tcp-check send-binary   30050201034200 # unbind request

listen mmcc_mysql_cluster *:3306
  mode tcp
  option tcplog
  # severalnines.com/resources/tutorials/mysql-load-balancing-haproxy-tutorial
  # TODO: Consider lowering individual server maxconns?
  maxconn 8192
  timeout client 10800s # Allow 3 hours long connections
  timeout server 10800s
  balance roundrobin # TODO: balance leastconn?
  option httpchk

  # severalnines.com/resources/tutorials/mysql-load-balancing-haproxy-tutorial#11
  default-server port 9200 inter 2s downinter 5s rise 3 fall 2 slowstart 60s maxconn 1000\
                                                                   maxqueue 128 weight 100
  server mysql1 192.168.1.110:3306 check
  server mysql2 192.168.1.111:3306 check backup
  server mysql3 192.168.1.112:3306 check backup

listen e2campus-sftp *:3000
  mode tcp
  option tcplog
  option tcp-check
  server docker-sftp 192.168.1.68:3000 check inter 2000

listen cortex-samba *:445
  mode tcp
  option tcplog
  option tcp-check
  server cortex1 192.168.1.91:445 check inter 2000
  server cortex2 192.168.1.92:445 check inter 2000 backup
